// Generated by CoffeeScript 1.7.1

/*
Arcade Royale Launcher
Hello hello. 2014.
MIT License.
 */
var helpers, k, k2, keys, settings, v, v2,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

helpers = require("./js/helpers");

settings = {};

keys = {};

$.ajax({
  url: '../settings.json',
  async: false,
  dataType: "json"
}).success(function(data) {
  settings.basedirectory = data.basedirectory;
  settings.directories = data.directories;
  settings.leftColour = helpers.hexToHsl(data.leftColour);
  settings.rightColour = helpers.hexToHsl(data.rightColour);
  settings.args = [];
  return keys = data.keys;
}).fail(function(error) {
  console.log("Error parsing settings file!");
  return console.log(error);
});

for (k in keys) {
  v = keys[k];
  if (typeof v === "object") {
    for (k2 in v) {
      v2 = v[k2];
      if (helpers.keyNameToCode[v2] !== void 0) {
        keys[k][k2] = helpers.keyNameToCode[v2];
      } else {
        console.log("Unknown key: '" + v2 + "'");
      }
    }
  } else {
    if (helpers.keyNameToCode[v] !== void 0) {
      keys[k] = helpers.keyNameToCode[v];
    } else {
      console.log("Unknown key: '" + v + "'");
    }
  }
}

keys.anyLeft = (function() {
  var _results;
  _results = [];
  for (k in keys) {
    v = keys[k];
    if (v.left !== void 0) {
      _results.push(v.left);
    }
  }
  return _results;
})();

keys.anyRight = (function() {
  var _results;
  _results = [];
  for (k in keys) {
    v = keys[k];
    if (v.right !== void 0) {
      _results.push(v.right);
    }
  }
  return _results;
})();

keys.anyA = (function() {
  var _results;
  _results = [];
  for (k in keys) {
    v = keys[k];
    if (v.a !== void 0) {
      _results.push(v.a);
    }
  }
  return _results;
})();

keys.anyB = (function() {
  var _results;
  _results = [];
  for (k in keys) {
    v = keys[k];
    if (v.b !== void 0) {
      _results.push(v.b);
    }
  }
  return _results;
})();

$(function() {
  var col, dir, i, la, style, t, _i, _len, _ref;
  _ref = settings.directories;
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    dir = _ref[i];
    $.ajax({
      url: settings.basedirectory + dir + '/arcadedata.json',
      async: false,
      dataType: "json",
      success: function(data) {
        settings.args.push(data.args);
        return $("#mainContainer ol").append("<li id=\"slide" + i + "\">\n    <h2><span>" + data.title + "</span></h2>\n    <div class=\"slidecontent\">\n        <h1>" + data.description + "</h1>\n        <h1>" + data.description_fr + "</h1>\n    </div>\n</li>");
      }
    }).fail(function(error) {
      console.log("Error parsing metadata for game '" + dir + "':");
      return console.log(error);
    });
  }
  style = (function() {
    var _j, _ref1, _results;
    _results = [];
    for (i = _j = 0, _ref1 = settings.directories.length; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      t = i / settings.directories.length;
      col = helpers.hslLerp(settings.leftColour, settings.rightColour, t);
      _results.push("#slide" + i + " h2 { background-color: hsl(" + col.h + ", " + col.s + "%, " + col.l + "%) }\n#slide" + i + " div { background-color: hsl(" + col.h + ", " + col.s + "%, " + col.l + "%) }");
    }
    return _results;
  })();
  $("head").append("<style>" + style.join("\n") + "</style>");
  la = $("#mainContainer").liteAccordion({
    "easing": "easeOutCubic",
    "containerWidth": $(window).width(),
    "containerHeight": $(window).height(),
    "headerWidth": 80,
    "slideSpeed": 400
  }).data('liteAccordion');
  return $(document).keydown(function(e) {
    var _ref1, _ref2, _ref3, _ref4;
    if (e.which === keys.home) {
      la.play(0);
      return la.stop();
    } else if (_ref1 = e.which, __indexOf.call(keys.anyLeft, _ref1) >= 0) {
      return la.prev();
    } else if (_ref2 = e.which, __indexOf.call(keys.anyRight, _ref2) >= 0) {
      return la.next();
    } else if ((_ref3 = e.which, __indexOf.call(keys.anyB, _ref3) >= 0) || (_ref4 = e.which, __indexOf.call(keys.anyA, _ref4) >= 0)) {
      if (la.current() !== 0) {
        return console.log("ok!");
      }
    }
  });
});

//# sourceMappingURL=buildpage.map
